{
   "templateVersion": "1.0.2",
   "demoVersion": "1.0.0",
   "title": "YAP - Hello World",
   "sidebar": [
      {
         "name": "step_1",
         "label": "Create Project"
      },
      {
         "name": "step_2",
         "label": "Create Routers"
      },
      {
         "name": "step_3",
         "label": "Enable Connectivity"
      }
   ],
   "navbar": {
      "logoUrl": "",
      "title": "",
      "navBgColor": "",
      "navFontColor": ""
   },
   "preface": [
      {
         "stepDesc": "Intro",
         "bodyMarkdown": "# Yet Another Presentation\n\n<br>\n\nThis demo describes Yet Another Presentation (YAP) tool functionalities by orchestrating a simple project in a safe mockup environment.\n\nAs a new user of YAP, after familiarizing yourself with this Hello World demo, you can start a new demo or modify this current demo to orchestrate your use case.\n\nAfter experimenting in presentation mode, you can click on the top right wheel icon and switch to Edit mode to explore how these actions can be customized by clicking on the element icon string."
      },
      {
         "stepDesc": "Create Project",
         "bodyMarkdown": "# Create Project\n\n<br>\n\nIn this first step, we will create a project container for our network.\n\nThe primary purpose of this activity is to explain how to execute a POST action toward our endpoint, evaluate the return code and payload, and store the UUID allocated for the project for other activities.\n\nThe outcome section propose an empty project container and you can test executing API calls toward any graphical elements. Just click on the cloud, select \"Get Project Details\" from the list of available commands and click on Run to execute the call."
      },
      {
         "stepDesc": "Create Routers",
         "bodyMarkdown": "# Create Routers\n\n<br>\n\nThe second step in our Hello World demo is to add two routers to our project.\n\nWe will perform this activity with two basic POST actions to demonstrate how you can run all API calls by clicking on Run All or one at a time by clicking on the action play icon. Every demo and audience is different, but YAP provides this flexibility level in the demo delivery.\n\nStep 2 introduces the concept of \"Post-Check\" actions, which behaves like the \"Actions\" but as the \"Pre-checks\", helps separate the purpose of your API calls.\n\nNote that the Outcome diagram includes in this step more elements and highlights an aspect to remind the person delivering the presentation of the focus. A step contextual representation is more effective than a single diagram, including everything from the beginning.\n\nNode_1 in the \"Outcome\" section exposes a command to ping the Node_2 interface, confirm that the ping is failing and a second command to check that the newly created interface is in a down state."
      },
      {
         "stepDesc": "Enable Connectivity",
         "bodyMarkdown": "# Enable Connectivity\n\n<br>\n\nThe trird step enable the connectivity between the two routers in our project\n\nThis activity is performed by two PATCH call on the resources created in the previous step, changing the status of the newly created interfaces to up."
      }
   ],
   "endpoints": {
      "MOCKUP": {
         "baseURL": "http://34.143.199.115:3010",
         "headers": {
            "Content-Type": "application/json"
         }
      }
   },
   "staticVariables": {
      "projectName": "My Project",
      "node1_ip": "1.1.1.1"
   },
   "mainContent": {
      "step_1": {
         "description": "Create a new project in the mockup server.<br>\nThe proposed payload for the POST action describes how to enclose a variable name between curly braces, like {{\\<varibale name>}} for the project name.<br>\nYAP supports variable substitution in the URL and the payload. You can configure static variables in the Settings section or capture the value from a call response payload.<br>\nFor example, the proposed project creation call, captures the project UUID for later reference.<br>\n",
         "continueOnFail": false,
         "prefaceRef": 1,
         "preCheck": [],
         "actions": [
            {
               "type": "request",
               "useEndpoint": "MOCKUP",
               "apiBadge": "Create",
               "apiBadgeColor": "Green",
               "title": "Add new project",
               "description": "The proposed payload for the POST action describe how to embed a variable in the",
               "url": "api/project",
               "method": "post",
               "data": {
                  "name": "{{projectName}}",
                  "description": "Mockup project to demonstrate YAP functionalities",
                  "routers": []
               },
               "expect": [
                  {
                     "type": "codeIs",
                     "value": ["201"]
                  },
                  {
                     "type": "bodyContain",
                     "value": "uuid"
                  }
               ],
               "match": {
                  "objectPath": "uuid",
                  "regEx": "(.*)",
                  "matchGroup": "1",
                  "storeAs": "projectId"
               }
            }
         ],
         "postCheck": [],
         "outcome": [
            {
               "summaryText": "A new clean project has been created - Click on the highligher cloud and execute the get details command.",
               "elements": {
                  "nodes": [
                     {
                        "data": {
                           "id": "Project",
                           "label": "My Project",
                           "width": "140px",
                           "height": "80px"
                        },
                        "position": {
                           "x": 400,
                           "y": -100
                        },
                        "classes": ["cloud", "labelCenter"]
                     }
                  ],
                  "edges": []
               },
               "commands": {
                  "Project": [
                     {
                        "type": "request",
                        "useEndpoint": "MOCKUP",
                        "displayResponseAs": "json",
                        "title": "get project detials",
                        "url": "/api/project/{{projectId}}",
                        "method": "get",
                        "data": {}
                     }
                  ]
               },
               "ssh": {}
            }
         ]
      },
      "step_2": {
         "description": "Add to the project two new routers.",
         "continueOnFail": false,
         "prefaceRef": 2,
         "preCheck": [
            {
               "type": "request",
               "useEndpoint": "MOCKUP",
               "apiBadge": "Get",
               "apiBadgeColor": "",
               "title": "Confirm reachability to the newly created project",
               "description": "",
               "url": "/api/project/{{projectId}}",
               "method": "get",
               "data": {},
               "expect": [
                  {
                     "type": "codeIs",
                     "value": ["200"]
                  }
               ]
            }
         ],
         "actions": [
            {
               "type": "request",
               "useEndpoint": "MOCKUP",
               "apiBadge": "Create",
               "apiBadgeColor": "Green",
               "title": "Add Node_1",
               "description": "",
               "url": "api/project/{{projectId}}/router",
               "method": "post",
               "data": {
                  "name": "Node_1",
                  "description": "First router",
                  "loopback": "6.6.6.1/32",
                  "intefaces": [
                     {
                        "name": "Ge0/0/0/0",
                        "ip": "{{node1_ip}}/24",
                        "status": "down"
                     }
                  ]
               },
               "expect": [
                  {
                     "type": "codeIs",
                     "value": ["201"]
                  },
                  {
                     "type": "bodyContain",
                     "value": "uuid"
                  }
               ],
               "match": {
                  "objectPath": "uuid",
                  "regEx": "(.*)",
                  "matchGroup": "1",
                  "storeAs": "routerId1"
               }
            },
            {
               "type": "request",
               "useEndpoint": "MOCKUP",
               "apiBadge": "Create",
               "apiBadgeColor": "Green",
               "title": "Add Node_2",
               "description": "",
               "url": "api/project/{{projectId}}/router",
               "method": "post",
               "data": {
                  "name": "Node_2",
                  "description": "Second router",
                  "loopback": "6.6.6.2/32",
                  "intefaces": [
                     {
                        "name": "Ge0/0/0/0",
                        "ip": "1.1.1.2/24",
                        "status": "down"
                     }
                  ]
               },
               "expect": [
                  {
                     "type": "codeIs",
                     "value": ["201"]
                  },
                  {
                     "type": "bodyContain",
                     "value": "uuid"
                  }
               ],
               "match": {
                  "objectPath": "uuid",
                  "regEx": "(.*)",
                  "matchGroup": "1",
                  "storeAs": "routerId2"
               }
            }
         ],
         "postCheck": [
            {
               "type": "request",
               "useEndpoint": "MOCKUP",
               "apiBadge": "RPC",
               "apiBadgeColor": "",
               "title": "Ping Node_2 interface from Node_1 (Expected Failure)",
               "description": "A ping to Node_2 interface from Node_1 should be unsuccess because the interfaces are in down state.",
               "url": "api/project/{{projectId}}/router/{{routerId1}}/live-status/exec/any",
               "method": "post",
               "data": {
                  "input": {
                     "args": "ping 1.1.1.2 source 1.1.1.1"
                  }
               },
               "expect": [
                  {
                     "type": "codeIs",
                     "value": ["200"]
                  },
                  {
                     "type": "bodyContain",
                     "value": "Success rate is 0 percent"
                  }
               ]
            }
         ],
         "outcome": [
            {
               "summaryText": "Two routers are added but there is no connectivity. Test connectivity with ping command on Node_1 and check the interface status.",
               "elements": {
                  "nodes": [
                     {
                        "data": {
                           "id": "Project",
                           "label": "My Project",
                           "width": "140px",
                           "height": "80px"
                        },
                        "position": {
                           "x": 50,
                           "y": 0
                        },
                        "classes": ["cloud", "labelCenter"]
                     },
                     {
                        "data": {
                           "id": "Node_1",
                           "label": "Node_1"
                        },
                        "position": {
                           "x": -100,
                           "y": 40
                        },
                        "classes": ["size-lg", "highlight", "router"]
                     },
                     {
                        "data": {
                           "id": "Node_2",
                           "label": "Node_2"
                        },
                        "position": {
                           "x": 200,
                           "y": 40
                        },
                        "classes": ["size-lg", "router"]
                     }
                  ],
                  "edges": [
                     {
                        "data": {
                           "source": "Node_1",
                           "target": "Node_2",
                           "id": "1dacd49f-6dc7-4f60-98ae-3735f1433981"
                        },
                        "classes": ["dashed"]
                     }
                  ]
               },
               "commands": {
                  "Project": [
                     {
                        "type": "request",
                        "useEndpoint": "MOCKUP",
                        "displayResponseAs": "json",
                        "title": "get project details",
                        "url": "/api/project/{{projectId}}",
                        "method": "get",
                        "data": {}
                     }
                  ],
                  "Node_1": [
                     {
                        "type": "request",
                        "useEndpoint": "MOCKUP",
                        "displayResponseAs": "json",
                        "title": "get router details",
                        "url": "/api/project/{{projectId}}/router/{{routerId1}}",
                        "method": "get",
                        "data": {}
                     },
                     {
                        "type": "request",
                        "useEndpoint": "MOCKUP",
                        "displayResponseAs": "json",
                        "title": "Ping Node_2 interface",
                        "url": "api/project/{{projectId}}/router/{{routerId1}}/live-status/exec/any",
                        "method": "post",
                        "data": {
                           "input": {
                              "args": "ping 1.1.1.2 source {{node1_ip}}"
                           }
                        }
                     }
                  ]
               },
               "ssh": {}
            }
         ]
      },
      "step_3": {
         "description": "Modify the status of the routers'interfaces from down to up to enable connectivity betweeen the devices.",
         "continueOnFail": false,
         "prefaceRef": 3,
         "preCheck": [],
         "actions": [
            {
               "type": "request",
               "useEndpoint": "MOCKUP",
               "apiBadge": "Patch",
               "apiBadgeColor": "Green",
               "title": "Update Node_1 GE interface status (from down to up)",
               "description": "",
               "url": "api/project/{{projectId}}/router/{{routerId1}}",
               "method": "patch",
               "data": {
                  "intefaces": [
                     {
                        "name": "Ge0/0/0/0",
                        "ip": "1.1.1.1/24",
                        "status": "up"
                     }
                  ]
               },
               "expect": [
                  {
                     "type": "codeIs",
                     "value": ["200"]
                  }
               ]
            },
            {
               "type": "request",
               "useEndpoint": "MOCKUP",
               "apiBadge": "Patch",
               "apiBadgeColor": "Green",
               "title": "Update Node_2 GE interface status (from down to up)",
               "description": "",
               "url": "api/project/{{projectId}}/router/{{routerId2}}",
               "method": "patch",
               "data": {
                  "intefaces": [
                     {
                        "name": "Ge0/0/0/0",
                        "ip": "1.1.1.2/24",
                        "status": "up"
                     }
                  ]
               },
               "expect": [
                  {
                     "type": "codeIs",
                     "value": ["200"]
                  }
               ]
            }
         ],
         "postCheck": [
            {
               "type": "polling",
               "useEndpoint": "MOCKUP",
               "apiBadge": "RPC",
               "apiBadgeColor": "",
               "title": "Ping Node_2 interface from Node_1 (Expected Failure)",
               "description": "A ping to Node_2 interface from Node_1 should be now sucessfull.",
               "interval": "1000",
               "maxRetry": "5",
               "url": "api/project/{{projectId}}/router/{{routerId1}}/live-status/exec/any",
               "method": "post",
               "data": {
                  "input": {
                     "args": "ping 1.1.1.2 source 1.1.1.1"
                  }
               },
               "expect": [
                  {
                     "type": "codeIs",
                     "value": ["200"]
                  },
                  {
                     "type": "bodyContain",
                     "value": "Success rate is 100 percent"
                  }
               ]
            }
         ],
         "outcome": [
            {
               "summaryText": "Established connectivity between the routers. Test connectivity with ping command on Node_1.",
               "elements": {
                  "nodes": [
                     {
                        "data": {
                           "id": "Project",
                           "label": "My Project",
                           "width": "140px",
                           "height": "80px"
                        },
                        "position": {
                           "x": 50,
                           "y": 0
                        },
                        "classes": ["cloud", "labelCenter"]
                     },
                     {
                        "data": {
                           "id": "Node_1",
                           "label": "Node_1"
                        },
                        "position": {
                           "x": -100,
                           "y": 40
                        },
                        "classes": ["size-lg", "highlight", "router"]
                     },
                     {
                        "data": {
                           "id": "Node_2",
                           "label": "Node_2"
                        },
                        "position": {
                           "x": 200,
                           "y": 40
                        },
                        "classes": ["size-lg", "router"]
                     }
                  ],
                  "edges": [
                     {
                        "data": {
                           "source": "Node_1",
                           "target": "Node_2",
                           "id": "001f458d-9595-49a6-a61a-390243e8d3a0"
                        },
                        "classes": []
                     }
                  ]
               },
               "commands": {
                  "Project": [
                     {
                        "type": "request",
                        "useEndpoint": "MOCKUP",
                        "displayResponseAs": "json",
                        "title": "get project details",
                        "url": "/api/project/{{projectId}}",
                        "method": "get",
                        "data": {}
                     }
                  ],
                  "Node_1": [
                     {
                        "type": "request",
                        "useEndpoint": "MOCKUP",
                        "displayResponseAs": "json",
                        "title": "get router details",
                        "url": "/api/project/{{projectId}}/router/{{routerId1}}",
                        "method": "get",
                        "data": {}
                     },
                     {
                        "type": "request",
                        "useEndpoint": "MOCKUP",
                        "displayResponseAs": "json",
                        "title": "Ping Node_2 interface",
                        "url": "api/project/{{projectId}}/router/{{routerId1}}/live-status/exec/any",
                        "method": "post",
                        "data": {
                           "input": {
                              "args": "ping 1.1.1.2 source 1.1.1.1"
                           }
                        }
                     }
                  ]
               },
               "ssh": {}
            }
         ]
      },
      "stage": {
         "description": "Run stage when a demo required a setup that doesn't need to be exposed in the demo flow.<br>\nThere is no stage activity in this Hello World demo.",
         "continueOnFail": false,
         "preCheck": [],
         "actions": [],
         "postCheck": []
      },
      "cleanup": {
         "description": "Run the cleanup function between demos, without releasing the staged resources.<br>\nDelete the project from the mockup server.<br>\nIn this demo, just delete the newly created project.",
         "continueOnFail": false,
         "preCheck": [],
         "actions": [
            {
               "type": "request",
               "useEndpoint": "MOCKUP",
               "apiBadge": "Delete",
               "apiBadgeColor": "",
               "title": "Remove the project",
               "description": "",
               "url": "api/project/{{projectId}}",
               "method": "delete",
               "data": {},
               "expect": [
                  {
                     "type": "codeIs",
                     "value": ["200", "404"]
                  }
               ]
            }
         ],
         "postCheck": [],
         "clearVariables": true
      },
      "unstage": {
         "description": "Run unstage when you need to release some demo resources and you don't need to expose these actions in the demo flow.<br>\nThere is no unstage activity in this Hello World demo.",
         "continueOnFail": false,
         "preCheck": [],
         "actions": [],
         "postCheck": []
      }
   }
}
