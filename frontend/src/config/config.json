{
   "templateVersion": "1.0.2",
   "demoVersion": "1.1.0",
   "title": "YAP - Hello World",
   "sidebar": [
      {
         "name": "step_1",
         "label": "Create Project"
      },
      {
         "name": "step_2",
         "label": "Create Routers"
      },
      {
         "name": "step_3",
         "label": "Enable Connectivity"
      }
   ],
   "navbar": {
      "logoUrl": "",
      "title": "",
      "navBgColor": "",
      "navFontColor": ""
   },
   "preface": [
      {
         "stepDesc": "Intro",
         "bodyMarkdown": "## Yet Another Presentation\n\n<br>\n\nWelcome to the YAP preface, a multitab section that you can use to describe the demo flow without skipping between YAP and PowerPoint. \nEach tab supports a Markdown or HTML formatted text that allows you to be creative with the documentation style. Best of all, you can include this information in the demo PDF report as live documentation for your demo.\n\nThis basic Hello Work demo describes the Yet Another Presentation tool (YAP) functionalities by orchestrating a simple project in a safe mockup environment. Following three basic steps, this demo:\n- Creates a new project\n- Add two connected router objects to the project\n- Validate that there is no connectivity between them\n- Enable their interface status and confirm the connectivity\n\n__Step 1 - Review the demo content__\n\nClick on the rest of the preface tabs for step-by-step information about this demo, and remember that you always come back to this information by clicking on the demo name (on the top left).\n\n<img width='500' src='https://storage.googleapis.com/yap_hello_world/prefece.png'/></br></br>\n\n\n__Step 2 - Execute the proposed demo steps__\n\nAs you finish reviewing the demo material, click on the demo steps list on the left to drive the actual demo using the flow suggested in the demo content.\n\nThis list represents a simple demo workflow that will mark a step as completed or failed based on the outcome of the configured API calls.\n\n<img width='200' src='https://storage.googleapis.com/yap_hello_world/workflow.png'/></br></br>\n\n\nNote that you can render the step documentation as a floating window by clicking on the burger on the top right.\n\n<img width='100' src='https://storage.googleapis.com/yap_hello_world/prefeceAccess.png'/></br></br>\n\n\nAfter experimenting with presentation mode, check the Next Steps section to learn more about the Edit mode. YAP exposes intuitive copy, delete and edit actions to customize the flow."
      },
      {
         "stepDesc": "Create Project",
         "bodyMarkdown": "### Create Project\n\n<br>\n\nIn the first step of our demo, we will create a project container for our network.\nTo perform this activity, we must execute a single POST call toward the demo endpoint, evaluate the return code and payload, and store the UUID allocated for the Project for the following steps.\n\nFor every step in a demo, YAP exposes an optional interactive contextual diagram that visualizes the achieved goal. You can interact with each object in the graph, executing pre-configured API calls or accessing the target object via an SSH session.\n\n\n__Step 1 - Interact with YAP context diagram__\n\nClick on the cloud, select \"Get Project Details\" from the list of available commands and then Run to execute the call.\n\n<img width='800' src='https://storage.googleapis.com/yap_hello_world/clickCloud.ong.png'/></br></br>\n\n__Step 2 - Execute the proposed APIs, exposing an appropriate level of information for the demo audience__\n\nThis example executes a GET call for a project that we still need to create and, as expected, returns a 404 error code. \nYAP interprets strings as variables when enclosed between two curly brackets, like projectId in this example. If you hover over the variables object, you can see no project UUID yet.\n\n<img width='800' src='https://storage.googleapis.com/yap_hello_world/outcome404.png'/></br></br>\n\nFor high-level presentations, you can execute all the pre-checks, actions and post-checks with a single click on the top right icon __run all__, without exposing the API details to the audience.\n\n<img width='800' src='https://storage.googleapis.com/yap_hello_world/createRunAll.png'></br></br>\n\nYou can expand the pre-checks, actions, and post-checks for more technical demos. Execute all APIs in a block, or each API call independently as your use case requires. Notice that YAP renders the pre-checks and post-checks sections only when they contain at least one API call.\n\n<img width='800' src='https://storage.googleapis.com/yap_hello_world/createRunOne.png'></br></br>\n\nYou can expand an API to expose the payloads, endpoint, variables and success criteria.\n\n<img width='800' src='https://storage.googleapis.com/yap_hello_world/createRunOneDetails.png'></br></br>\n\n__Step 3 - Present the API call response and sucess criterias__\n\nFor technical presentation, after executing an API call, YAP renders the response code and payload.\n\n<img width='800' src='https://storage.googleapis.com/yap_hello_world/createResponse.png\n'></br></br>\n\nHover over the Endpoint label to visualize endpoint details.\n\n<img width='800' src='https://storage.googleapis.com/yap_hello_world/endpoint.png\n'></br></br>\n\nHover over the Variabales label to visualize the variables used or captured by the API. \n\n<img width='800' src='https://storage.googleapis.com/yap_hello_world/variables.png\n'></br></br>\n\nHover on the Expect label to visualize the expected response code or string to be matched in the response payload before marking this API as completed successfully.\n\n<img width='800' src='https://storage.googleapis.com/yap_hello_world/expect.png\n'></br></br>\n\n__Step 4 - Validate the step objective__\n\nFollow the same process as Step 1, click on the cloud icon and execute \"Get Project Details\" to confirm that your project has been created. \n\n<img width='800' src='https://storage.googleapis.com/yap_hello_world/outcomeCommand.png'></br><br>\n\nAlso, notice that the demo step and each API  show a green check mark to confirm the successful execution. All APIs in a section must execute successfully before marking a phase on the demo work flow. If any API fails, the demo phase shows a failure mark."
      },
      {
         "stepDesc": "Create Routers",
         "bodyMarkdown": "### Create Routers\n\n<br>\n\nThe second step in our Hello World demo adds two routers to the project just created and validates the connectivity between them.\n\n<img width='800' src='https://storage.googleapis.com/yap_hello_world/step_2/Step2_intro.png'/></br></br>\n\n__Step 1 - Confirm there is no router in the project__\n\nClick on Node_1, select and run \"Get router detail\" to confirm that your project has no router configuration.\n\n<img width='800' src='https://storage.googleapis.com/yap_hello_world/step_2/noRouter.png'/></br></br>\n\n__Step 2 - Execute the pre-check section__\n\nThis simple action on the pre-check explains how you can validate with one or more GET calls your demo state before progressing on the step actions. \n\n<img width='800' src='https://storage.googleapis.com/yap_hello_world/step_2/preCheck.png'/></br></br>\n\n__Step 3 - Execute action section__\n\nCreate two routers in our project by executing two basic POST API calls.\nYou can run the whole API block or run one API at a time. \nEvery demo and audience is different, but YAP provides this flexibility level in the demo delivery. If you run their APIs multiple times, the demo will still work, but multiple routers (with different UUIDs) instances will be added to the project because this is a POST command. \n\n<img width='800' src='https://storage.googleapis.com/yap_hello_world/step_2/action.png'/></br></br>\n\n__Step 4 - Execute post-check section__\n\nA Post-check is an optional section that behaves like the Actions but, as the Pre-checks, helps separate the purpose of your API calls and focuses on the validation.\n\n<img width='800' src='https://storage.googleapis.com/yap_hello_world/step_2/postcheck.png'/></br></br>\n\n__Step 5 - Confirm the outcome from contextual diagram__\n\nFor high-level presentations, instead of exposing the API response, we can run the preconfigured commands or show directly the outcome on the target system UI.\n\nAs we learned in the previous section, execute again the commands pre-configured for Node_1 in the Outcome section that confirm the newly created interface is in a down state.\n\n<img width='800' src='https://storage.googleapis.com/yap_hello_world/step_2/outcome.png'/></br></br>\n\nAs the outcome complexity increases, you can highlight one or more objects to focus attention and drive the user when presenting."
      },
      {
         "stepDesc": "Enable Connectivity",
         "bodyMarkdown": "### Enable Connectivity\n\n<br>\n\nThe third step follows the same flow suggested in Step 2, enabling connectivity between the two routers in your project.\n\n__Step 1 - Execute all API calls in this step__\n\nAs we learned in previous steps, we can execute all API with a single click on Run All (play icon in the top right).\nThis activity performs two PATCH calls on the resources created in the previous step, changing the status of the newly created interfaces to up.\n\n<img width='800' src='https://storage.googleapis.com/yap_hello_world/step_3/runAll.png'/></br></br>\n\n__Step 2 - Confirm Outcome in Post_Checks__\n\nExpand the Post-Check section to see that the connectivity is now successful. If you hover over the expect, you appreciate how YAP validate this state by matching the success rate in the response payload.\n\n<img width='800' src='https://storage.googleapis.com/yap_hello_world/step_3/postCheck.png'/></br></br>\n\n__Step 3 - Confirm Outcome in the Outcome__\n\nFinally, execute the \"Get Router Details\" on Node_1 in th Outcome section to confirm the interface status and connectivity.\n\n<img width='800' src='https://storage.googleapis.com/yap_hello_world/step_3/outcomeStatus.png'/></br></br>\n\n<img width='800' src='https://storage.googleapis.com/yap_hello_world/step_3/connectivity.png'/></br></br>"
      },
      {
         "bodyMarkdown": "### Generate Documentation\n\n<br>\n\nYAP can generate the documentation for your demo, summarizing the preface information and a complete API description, including responses for the executed calls.\n\nClick on the three dots (...) on the top right menu and select __Export as PDF__ from the proposed menu.\n\n<img width='900' src='https://storage.googleapis.com/yap_hello_world/exportAsPDF.png'/></br></br>\n\nYAP will generate the documentation as a PDF and ask where to save the document. You can now open this document with Word and, if required, modify the format proposed.",
         "stepDesc": "Generate Documentation"
      },
      {
         "bodyMarkdown": "### Cleanup Demo\n\n<br>\n\nYAP supports three operation phases: Stage, Unstage and Cleanup. \n\nYou can access these stages by clicking the three dots (...) on the top right menu.\n\nThese stages behave like the other demo phases, supporting pre-checks, actions, and post-checks API sections. They are optional; you can decide how to use them.\n\n<img width='300' src='https://storage.googleapis.com/yap_hello_world/operation.png'/></br></br>\n- For example, you can leverage __Stage__ to bring up demo resources or set up a demo baseline.\n- You can run __Clean Up__ between demos to remove configured resources without losing the state achieved by running Stage.\n- Finally, __Unstage__ is suitable for decommissioning your demo resources.\n\n__Step 1 - Run All for Cleanup step__\n\nThis basic demo leverages only the Cleanup step. Execute Run All to remove your project and reset the status of the demo workflow, removing the success checks.\n\n<img width='800' src='https://storage.googleapis.com/yap_hello_world/clean/cleanAll.png'/></br></br>\n\nClean Up is the perfect place for hiding your authentication if you want to avoid exposing it as demo steps. \n\nIn this case, remember to uncheck \"Clear Variables\" to prevent the action of cleaning the local storage with retrieved certificates or tickets.",
         "stepDesc": "Reset Demo"
      },
      {
         "bodyMarkdown": "### Next Steps\n\n<br>\n\nAfter experimenting with the presentation mode, try a few changes on this demo or add some API calls to your environment before stepping in and creating a new use case.\n\nClick the right wheel icon on the top right to access this demo Setting. \n\n<img width='200' src='https://storage.googleapis.com/yap_hello_world/nextSteps/wheel.png'/></br></br>\n\n__Settings__ exposes the endpoint. You can have one or multiple endpoints, click on the endpoint names to access its details.\n\n<img width='800' src='https://storage.googleapis.com/yap_hello_world/nextSteps/settings.png'/></br></br>\n\nClick the right wheel icon again and select the switch YAP in __Edit mode__. YAP exposes intuitive copy, delete and edit actions to customize the flow.\n\n<img width='200' src='https://storage.googleapis.com/yap_hello_world/nextSteps/edit.png'/></br></br>\n\nClick around the different sections of the demo and explore the edit, copy, duplicate, and delete options  offered by the YAP UI\n\n<img width='800' src='https://storage.googleapis.com/yap_hello_world/nextSteps/change.png'/></br></br>\n\nAfter updating your demo, you may save your work by exporting your changes as a JSON file to re-import at a later stage, from this same view or from the Catalog. \n\n<img width='200' src='https://storage.googleapis.com/yap_hello_world/nextSteps/importexport.png'/></br></br>\n\nFinally, select __Reset to catalog__ to close this demo and render YAP startup catalog page.\n\n<img width='200' src='https://storage.googleapis.com/yap_hello_world/nextSteps/reset.png'/></br></br>\n\nIf you have any comments or are interested in collaborating on this project, leave us a message on [YAP discussion](https://github.com/adt-apjc/YAP/discussions).",
         "stepDesc": "Next Steps "
      }
   ],
   "endpoints": {
      "MOCKUP": {
         "baseURL": "http://64.104.255.166:80/mockup",
         "headers": {
            "Content-Type": "application/json"
         }
      }
   },
   "staticVariables": {
      "projectName": "My Project",
      "node1_ip": "1.1.1.1"
   },
   "mainContent": {
      "step_1": {
         "description": "Create a new project in the mockup server.<br>\nThe proposed payload for the POST action describes how to enclose a variable name between curly braces, like {{\\<varibale name>}} for the project name.<br>\nYAP supports variable substitution in the URL and the payload. You can configure static variables in the Settings section or capture the value from a call response payload.<br>\nFor example, the proposed project creation call, captures the project UUID for later reference.<br>\n",
         "continueOnFail": false,
         "prefaceRef": 1,
         "preCheck": [],
         "actions": [
            {
               "type": "request",
               "useEndpoint": "MOCKUP",
               "apiBadge": "Create",
               "apiBadgeColor": "Green",
               "title": "Add new project",
               "description": "",
               "url": "api/project",
               "method": "post",
               "displayResponseAs": "json",
               "payloadType": "json",
               "expect": [
                  {
                     "type": "codeIs",
                     "value": ["201"]
                  },
                  {
                     "type": "bodyContain",
                     "value": "uuid"
                  }
               ],
               "match": {
                  "objectPath": "uuid",
                  "regEx": "(.*)",
                  "matchGroup": "1",
                  "storeAs": "projectId"
               },
               "data": {
                  "name": "{{projectName}}",
                  "description": "Mockup project to demonstrate YAP functionalities",
                  "routers": []
               }
            }
         ],
         "postCheck": [],
         "outcome": [
            {
               "summaryText": "A new clean project has been created - Click on the highligher cloud and execute the get details command.",
               "elements": {
                  "nodes": [
                     {
                        "data": {
                           "id": "Project",
                           "label": "My Project",
                           "width": "140px",
                           "height": "80px"
                        },
                        "position": {
                           "x": 400,
                           "y": -100
                        },
                        "classes": ["cloud", "labelCenter"]
                     }
                  ],
                  "edges": []
               },
               "commands": {
                  "Project": [
                     {
                        "type": "request",
                        "useEndpoint": "MOCKUP",
                        "displayResponseAs": "json",
                        "title": "get project detials",
                        "url": "/api/project/{{projectId}}",
                        "method": "get",
                        "data": {}
                     }
                  ]
               },
               "ssh": {}
            }
         ]
      },
      "step_2": {
         "description": "Add to the project two new routers.",
         "continueOnFail": false,
         "prefaceRef": 2,
         "preCheck": [
            {
               "type": "request",
               "useEndpoint": "MOCKUP",
               "apiBadge": "Get",
               "apiBadgeColor": "",
               "title": "Confirm reachability to the newly created project",
               "description": "",
               "url": "/api/project/{{projectId}}",
               "method": "get",
               "data": {},
               "expect": [
                  {
                     "type": "codeIs",
                     "value": ["200"]
                  }
               ]
            }
         ],
         "actions": [
            {
               "type": "request",
               "useEndpoint": "MOCKUP",
               "apiBadge": "Create",
               "apiBadgeColor": "Green",
               "title": "Add Node_1",
               "description": "",
               "url": "api/project/{{projectId}}/router",
               "method": "post",
               "data": {
                  "name": "Node_1",
                  "description": "First router",
                  "loopback": "6.6.6.1/32",
                  "intefaces": [
                     {
                        "name": "Ge0/0/0/0",
                        "ip": "{{node1_ip}}/24",
                        "status": "down"
                     }
                  ]
               },
               "expect": [
                  {
                     "type": "codeIs",
                     "value": ["201"]
                  },
                  {
                     "type": "bodyContain",
                     "value": "uuid"
                  }
               ],
               "match": {
                  "objectPath": "uuid",
                  "regEx": "(.*)",
                  "matchGroup": "1",
                  "storeAs": "routerId1"
               }
            },
            {
               "type": "request",
               "useEndpoint": "MOCKUP",
               "apiBadge": "Create",
               "apiBadgeColor": "Green",
               "title": "Add Node_2",
               "description": "",
               "url": "api/project/{{projectId}}/router",
               "method": "post",
               "data": {
                  "name": "Node_2",
                  "description": "Second router",
                  "loopback": "6.6.6.2/32",
                  "intefaces": [
                     {
                        "name": "Ge0/0/0/0",
                        "ip": "1.1.1.2/24",
                        "status": "down"
                     }
                  ]
               },
               "expect": [
                  {
                     "type": "codeIs",
                     "value": ["201"]
                  },
                  {
                     "type": "bodyContain",
                     "value": "uuid"
                  }
               ],
               "match": {
                  "objectPath": "uuid",
                  "regEx": "(.*)",
                  "matchGroup": "1",
                  "storeAs": "routerId2"
               }
            }
         ],
         "postCheck": [
            {
               "type": "request",
               "useEndpoint": "MOCKUP",
               "apiBadge": "RPC",
               "apiBadgeColor": "",
               "title": "Ping Node_2 interface from Node_1 (Expected Failure)",
               "description": "A ping to Node_2 interface from Node_1 should be unsuccess because the interfaces are in down state.",
               "url": "api/project/{{projectId}}/router/{{routerId1}}/live-status/exec/any",
               "method": "post",
               "data": {
                  "input": {
                     "args": "ping 1.1.1.2 source 1.1.1.1"
                  }
               },
               "expect": [
                  {
                     "type": "codeIs",
                     "value": ["200"]
                  },
                  {
                     "type": "bodyContain",
                     "value": "Success rate is 0 percent"
                  }
               ]
            }
         ],
         "outcome": [
            {
               "summaryText": "Two routers are added but there is no connectivity. Test connectivity with ping command on Node_1 and check the interface status.",
               "elements": {
                  "nodes": [
                     {
                        "data": {
                           "id": "Project",
                           "label": "My Project",
                           "width": "140px",
                           "height": "80px"
                        },
                        "position": {
                           "x": 50,
                           "y": 0
                        },
                        "classes": ["cloud", "labelCenter"]
                     },
                     {
                        "data": {
                           "id": "Node_1",
                           "label": "Node_1"
                        },
                        "position": {
                           "x": -100,
                           "y": 40
                        },
                        "classes": ["size-lg", "highlight", "router"]
                     },
                     {
                        "data": {
                           "id": "Node_2",
                           "label": "Node_2"
                        },
                        "position": {
                           "x": 200,
                           "y": 40
                        },
                        "classes": ["size-lg", "router"]
                     }
                  ],
                  "edges": [
                     {
                        "data": {
                           "source": "Node_1",
                           "target": "Node_2",
                           "id": "1dacd49f-6dc7-4f60-98ae-3735f1433981"
                        },
                        "classes": ["dashed"]
                     }
                  ]
               },
               "commands": {
                  "Project": [
                     {
                        "type": "request",
                        "useEndpoint": "MOCKUP",
                        "displayResponseAs": "json",
                        "title": "get project details",
                        "url": "/api/project/{{projectId}}",
                        "method": "get",
                        "data": {}
                     }
                  ],
                  "Node_1": [
                     {
                        "type": "request",
                        "useEndpoint": "MOCKUP",
                        "displayResponseAs": "json",
                        "title": "get router details",
                        "url": "/api/project/{{projectId}}/router/{{routerId1}}",
                        "method": "get",
                        "data": {}
                     },
                     {
                        "type": "request",
                        "useEndpoint": "MOCKUP",
                        "displayResponseAs": "json",
                        "title": "Ping Node_2 interface",
                        "url": "api/project/{{projectId}}/router/{{routerId1}}/live-status/exec/any",
                        "method": "post",
                        "data": {
                           "input": {
                              "args": "ping 1.1.1.2 source {{node1_ip}}"
                           }
                        }
                     }
                  ]
               },
               "ssh": {}
            }
         ]
      },
      "step_3": {
         "description": "Modify the status of the routers'interfaces from down to up to enable connectivity betweeen the devices.",
         "continueOnFail": false,
         "prefaceRef": 3,
         "preCheck": [],
         "actions": [
            {
               "type": "request",
               "useEndpoint": "MOCKUP",
               "apiBadge": "Patch",
               "apiBadgeColor": "Green",
               "title": "Update Node_1 GE interface status (from down to up)",
               "description": "",
               "url": "api/project/{{projectId}}/router/{{routerId1}}",
               "method": "patch",
               "data": {
                  "intefaces": [
                     {
                        "name": "Ge0/0/0/0",
                        "ip": "1.1.1.1/24",
                        "status": "up"
                     }
                  ]
               },
               "expect": [
                  {
                     "type": "codeIs",
                     "value": ["200"]
                  }
               ]
            },
            {
               "type": "request",
               "useEndpoint": "MOCKUP",
               "apiBadge": "Patch",
               "apiBadgeColor": "Green",
               "title": "Update Node_2 GE interface status (from down to up)",
               "description": "",
               "url": "api/project/{{projectId}}/router/{{routerId2}}",
               "method": "patch",
               "data": {
                  "intefaces": [
                     {
                        "name": "Ge0/0/0/0",
                        "ip": "1.1.1.2/24",
                        "status": "up"
                     }
                  ]
               },
               "expect": [
                  {
                     "type": "codeIs",
                     "value": ["200"]
                  }
               ]
            }
         ],
         "postCheck": [
            {
               "type": "polling",
               "useEndpoint": "MOCKUP",
               "apiBadge": "RPC",
               "apiBadgeColor": "",
               "title": "Ping Node_2 interface from Node_1 (Expected Failure)",
               "description": "A ping to Node_2 interface from Node_1 should be now sucessfull.",
               "interval": "1000",
               "maxRetry": "5",
               "url": "api/project/{{projectId}}/router/{{routerId1}}/live-status/exec/any",
               "method": "post",
               "data": {
                  "input": {
                     "args": "ping 1.1.1.2 source 1.1.1.1"
                  }
               },
               "expect": [
                  {
                     "type": "codeIs",
                     "value": ["200"]
                  },
                  {
                     "type": "bodyContain",
                     "value": "Success rate is 100 percent"
                  }
               ]
            }
         ],
         "outcome": [
            {
               "summaryText": "Established connectivity between the routers. Test connectivity with ping command on Node_1.",
               "elements": {
                  "nodes": [
                     {
                        "data": {
                           "id": "Project",
                           "label": "My Project",
                           "width": "140px",
                           "height": "80px"
                        },
                        "position": {
                           "x": 50,
                           "y": 0
                        },
                        "classes": ["cloud", "labelCenter"]
                     },
                     {
                        "data": {
                           "id": "Node_1",
                           "label": "Node_1"
                        },
                        "position": {
                           "x": -100,
                           "y": 40
                        },
                        "classes": ["size-lg", "highlight", "router"]
                     },
                     {
                        "data": {
                           "id": "Node_2",
                           "label": "Node_2"
                        },
                        "position": {
                           "x": 200,
                           "y": 40
                        },
                        "classes": ["size-lg", "router"]
                     }
                  ],
                  "edges": [
                     {
                        "data": {
                           "source": "Node_1",
                           "target": "Node_2",
                           "id": "001f458d-9595-49a6-a61a-390243e8d3a0"
                        },
                        "classes": []
                     }
                  ]
               },
               "commands": {
                  "Project": [
                     {
                        "type": "request",
                        "useEndpoint": "MOCKUP",
                        "displayResponseAs": "json",
                        "title": "get project details",
                        "url": "/api/project/{{projectId}}",
                        "method": "get",
                        "data": {}
                     }
                  ],
                  "Node_1": [
                     {
                        "type": "request",
                        "useEndpoint": "MOCKUP",
                        "displayResponseAs": "json",
                        "title": "get router details",
                        "url": "/api/project/{{projectId}}/router/{{routerId1}}",
                        "method": "get",
                        "data": {}
                     },
                     {
                        "type": "request",
                        "useEndpoint": "MOCKUP",
                        "displayResponseAs": "json",
                        "title": "Ping Node_2 interface",
                        "url": "api/project/{{projectId}}/router/{{routerId1}}/live-status/exec/any",
                        "method": "post",
                        "data": {
                           "input": {
                              "args": "ping 1.1.1.2 source 1.1.1.1"
                           }
                        }
                     }
                  ]
               },
               "ssh": {}
            }
         ]
      },
      "stage": {
         "description": "Run stage when a demo required a setup that doesn't need to be exposed in the demo flow.<br>\nThere is no stage activity in this Hello World demo.",
         "continueOnFail": false,
         "preCheck": [],
         "actions": [],
         "postCheck": []
      },
      "cleanup": {
         "description": "Run the cleanup function between demos, without releasing the staged resources.<br>\nDelete the project from the mockup server.<br>\nIn this demo, just delete the newly created project.",
         "continueOnFail": false,
         "preCheck": [],
         "actions": [
            {
               "type": "request",
               "useEndpoint": "MOCKUP",
               "apiBadge": "Delete",
               "apiBadgeColor": "",
               "title": "Remove the project",
               "description": "",
               "url": "api/project/{{projectId}}",
               "method": "delete",
               "data": {},
               "expect": [
                  {
                     "type": "codeIs",
                     "value": ["200", "404"]
                  }
               ]
            }
         ],
         "postCheck": [],
         "clearVariables": true
      },
      "unstage": {
         "description": "Run unstage when you need to release some demo resources and you don't need to expose these actions in the demo flow.<br>\nThere is no unstage activity in this Hello World demo.",
         "continueOnFail": false,
         "preCheck": [],
         "actions": [],
         "postCheck": []
      }
   }
}
